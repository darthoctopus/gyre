! Module  : poly_file_m
! Purpose : read POLY files
!
! Copyright 2013-2022 Rich Townsend & The MESA Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module poly_file_m

   ! Uses

   use forum_m, only: RD, hdf5io_t, OPEN_FILE_RO

   use constants_m
   use evol_model_m
   use grid_m
   use model_m
   use model_par_m
   use poly_model_m
   use util_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   public :: read_poly_model
   public :: read_poly_model_as_evol

   ! Default access

   private

contains

   subroutine read_poly_model(ml_p, ml)

      type(model_par_t), intent(in)        :: ml_p
      class(model_t), pointer, intent(out) :: ml

      type(hdf5io_t)              :: hi
      real(RD), allocatable       :: n_poly(:)
      integer                     :: n_r
      real(RD), allocatable       :: Delta_b(:)
      real(RD)                    :: Gamma_1
      real(RD), allocatable       :: z(:)
      real(RD), allocatable       :: theta(:)
      real(RD), allocatable       :: dtheta(:)
      real(RD)                    :: Omega_rot
      type(poly_model_t), pointer :: pm

      ! Read the POLY-format file

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Reading from POLY file', TRIM(ml_p%file)
100      format(A,1X,A)
      endif

      hi = hdf5io_t(ml_p%file, OPEN_FILE_RO)

      call hi%read_attr('n_r', n_r)

      call hi%alloc_read_attr('n_poly', n_poly)
      if (n_r > 1) then
         call hi%alloc_read_attr('Delta_b', Delta_b)
      else
         allocate(Delta_b(0))
      endif
      call hi%read_attr('Gamma_1', Gamma_1)

      call hi%alloc_read_dset('z', z)
      call hi%alloc_read_dset('theta', theta)
      call hi%alloc_read_dset('dtheta', dtheta)

      call hi%final()

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 110) 'Read', SIZE(z), 'points'
110      format(3X,A,1X,I0,1X,A)
      endif

      ! Set up Omega_rot

      Omega_rot = 0._RD

      ! Initialize the poly_model_t

      allocate(pm, SOURCE=poly_model_t(z, theta, dtheta, n_poly, Delta_b, Gamma_1, Omega_rot, ml_p%interp_type))

      ! Return a pointer

      ml => pm

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, *)
      endif

      ! Finish

      return

   end subroutine read_poly_model

   !****

   subroutine read_poly_model_as_evol(ml_p, ml)

      type(model_par_t), intent(in)        :: ml_p
      class(model_t), pointer, intent(out) :: ml

      class(model_t), pointer      :: pm
      type(grid_t)                 :: gr
      real(RD), allocatable        :: x(:)
      integer                      :: n
      real(RD), allocatable        :: V_2(:)
      real(RD), allocatable        :: As(:)
      real(RD), allocatable        :: U(:)
      real(RD), allocatable        :: c_1(:)
      real(RD), allocatable        :: Gamma_1(:)
      real(RD), allocatable        :: Omega_rot(:)
      integer                      :: j
      class(evol_model_t), pointer :: em

      ! Read the poly-format file and convert to an evol_model_t

      call read_poly_model(ml_p, pm)

      ! Extract the grid

      gr = pm%grid()
      x = gr%pt%x

      n = gr%n

      ! Next, extract structure variables

      allocate(V_2(n))
      allocate(As(n))
      allocate(U(n))
      allocate(c_1(n))

      allocate(Gamma_1(n))

      allocate(Omega_rot(n))

      do j = 1, n

         V_2(j) = pm%coeff(I_V_2, gr%pt(j))
         As(j) = pm%coeff(I_AS, gr%pt(j))
         U(j) = pm%coeff(I_U, gr%pt(j))
         c_1(j) = pm%coeff(I_C_1, gr%pt(j))

         Gamma_1(j) = pm%coeff(I_GAMMA_1, gr%pt(j))

         Omega_rot(j) = pm%coeff(I_OMEGA_ROT, gr%pt(j))

      end do

!      V_2(n) = HUGE(0._RD)
!      As(n) = HUGE(0._RD)
      V_2(n) = 1E10
      As(n) = 1E10

      ! Construct the evol_model_t

      allocate(em, SOURCE=evol_model_t(x, M_SUN, R_SUN, L_SUN, ml_p))

      call em%define(I_V_2, V_2)
      call em%define(I_AS, As)
      call em%define(I_U, U)
      call em%define(I_C_1, c_1)

      call em%define(I_GAMMA_1, Gamma_1)

      call em%define(I_OMEGA_ROT, Omega_rot)

      call em%commit()

      ! Return a pointer

      ml => em

      ! Free up pm

      deallocate(pm)

      ! Finish

      return

   end subroutine read_poly_model_as_evol

end module poly_file_m
