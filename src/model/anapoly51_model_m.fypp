! Module  : anapoly_model_m
! Purpose : stellar analytic polytrope model
!
! Copyright 2024 Rich Townsend & The GYRE Team
!
! This file is part of GYRE. GYRE is free software: you can
! redistribute it and/or modify it under the terms of the GNU General
! Public License as published by the Free Software Foundation, version 3.
!
! GYRE is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'gyre.inc'

module anapoly51_model_m

   ! Uses

   use forum_m, only: RD

   use constants_m
   use grid_m
   use math_m
   use model_m
   use model_par_m
   use num_par_m
   use point_m
   use status_m
   use util_m

   use ISO_FORTRAN_ENV
   use IEEE_ARITHMETIC

   use F95_LAPACK

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(model_t) :: anapoly51_model_t
      private
      type(grid_t) :: gr
      real(RD)     :: z_t
      real(RD)     :: z_s
      real(RD)     :: mu_t
      real(RD)     :: mu_s
      real(RD)     :: t(2)
      real(RD)     :: B(2)
      real(RD)     :: X(2)
      real(RD)     :: alpha
      real(RD)     :: dtheta_t
      real(RD)     :: Gamma_1
      real(RD)     :: Omega_rot
      integer      :: s_i
      integer      :: s_o
   contains
      private
      procedure         :: theta_
      procedure         :: dtheta_
      procedure, public :: coeff
      procedure         :: coeff_V_2_
      procedure         :: coeff_As_
      procedure         :: coeff_U_
      procedure         :: coeff_c_1_
      procedure, public :: coeff_U_D
      procedure, public :: dcoeff
      procedure         :: mu_
      procedure, public :: is_defined
      procedure, public :: is_vacuum
      procedure, public :: Delta_p
      procedure, public :: Delta_g
      procedure, public :: grid
   end type anapoly51_model_t

   ! Interfaces

   interface anapoly51_model_t
      module procedure anapoly51_model_t_
   end interface anapoly51_model_t

   ! Access specifiers

   public :: anapoly51_model_t

   ! Default access

   private

contains

   function anapoly51_model_t_(ml_p) result(ml)

      use grid_weights_m

      type(model_par_t), intent(in) :: ml_p
      type(anapoly51_model_t)       :: ml

      real(RD), allocatable :: w(:)
      integer               :: status
      real(RD)              :: theta(2)
      real(RD)              :: dtheta(2)
      real(RD)              :: B(2)
      real(RD)              :: t(2)
      real(RD)              :: mu_t
      real(RD)              :: dtheta_t
      real(RD)              :: alpha
      real(RD)              :: A(2,2)
      real(RD)              :: X(2)
      real(RD)              :: z_s
      real(RD)              :: dtheta_s
      real(RD)              :: mu_s

      ! Construct the anapoly51_model_t

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 100) 'Constructing analytic (5-1) polytrope model'
100      format(A)
      endif

      ! Solve for the polytrope structure

      associate(z_t => ml_p%z_trans)

         ! Evaluate quantities on either side of the transition point

         theta(1) = 1._RD/sqrt(1._RD + z_t**2/3._RD)
         dtheta(1) = -z_t/(3._RD*sqrt(1._RD + z_t**2/3._RD)**3)

         theta(2) = 1._RD

         t(1) = 1._RD
         t(2) = (theta(1)**5/theta(2)**1)*t(1)

         B(1) = 1._RD
         B(2) = (6._RD/2._RD)*(theta(2)**2/theta(1)**6)*(t(2)/t(1))**2*B(1)

         dtheta(2) = (B(2)/B(1))*(t(1)/t(2))*dtheta(1)

         mu_t = -z_t**2*dtheta(1)
         dtheta_t = dtheta(2)

         ! Solve for coefficients in the n_poly=1 region

         alpha = sqrt(B(2))

         A(1,1) = sin(alpha*z_t)/(alpha*z_t)
         A(1,2) = cos(alpha*z_t)/(alpha*z_t)

         A(2,1) = cos(alpha*z_t)/z_t - sin(alpha*z_t)/(alpha*z_t**2)
         A(2,2) = -sin(alpha*z_t)/z_t - cos(alpha*z_t)/(alpha*z_t**2)

         X(1) = theta(2)
         X(2) = dtheta(2)

         call LA_GESV(A, X)

         ! Evaluate the surface properties

         z_s = atan2(-X(2), X(1))/alpha

         do
            if (z_s > z_t) exit
            z_s = z_s + PI/alpha
         end do

         dtheta_s = X(1)*( cos(alpha*z_s)/z_s - sin(alpha*z_s)/(alpha*z_s**2)) + &
                    X(2)*(-sin(alpha*z_s)/z_s - cos(alpha*z_s)/(alpha*z_s**2))

         mu_s = mu_t - t(2)/B(2)*(z_s**2*dtheta_s - z_t**2*dtheta_t)

      end associate

      ! Store data

      ml%z_t = ml_p%z_trans
      ml%z_s = z_s

      ml%mu_t = mu_t
      ml%mu_s = mu_s

      ml%t = t
      ml%B = B

      ml%X = X

      ml%alpha = alpha

      ml%dtheta_t = dtheta_t

      ml%Gamma_1 = ml_p%Gamma_1

      ml%Omega_rot = 0._RD

      ! Set up the grid

      if (ml_p%resolve_trans) then

         ! Resolve the transition point -- two segments

         ml%gr = grid_t([0._RD, ml%z_t/ml%z_s, ml%z_t/ml%z_s, 1._RD])

      else

         ! Don't resolve the transition point -- one segment

         ml%gr = grid_t([0._RD, 1._RD])

      end if

      ml%s_i = ml%gr%s_i()
      ml%s_o = ml%gr%s_o()

      if (check_log_level('INFO')) then
         write(OUTPUT_UNIT, 110) 'Created', ml%gr%n, 'points'
110      format(3X,A,1X,I0,1X,A)
      endif

      ! Finish

      return

   end function anapoly51_model_t_

   !****

   function theta_(this, pt) result(theta)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: theta

      real(RD) :: z

      ! Evaluate the polytropic dependent variable

      z = pt%x*this%z_s

      if (z == this%z_s) then

         theta = 0._RD

      else

         if ((this%s_i /= this%s_o .AND. pt%s == this%s_i) .OR. &
             (this%s_i == this%s_o .AND. z < this%z_t)) then

            theta = 1._RD/sqrt(1._RD + z**2/3._RD)

         else

            associate(alpha => this%alpha)
               theta = this%X(1)*sin(alpha*z)/(alpha*z) + &
                       this%X(2)*cos(alpha*z)/(alpha*z)
            end associate

         end if

      end if

      ! Finish

      return

   end function theta_

   !****

   function dtheta_(this, pt) result(dtheta)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: dtheta

      real(RD) :: z

      ! Evaluate the derivative of the polytropic dependent variable

      z = pt%x*this%z_s

      if (z /= 0._RD) then

         if ((this%s_i /= this%s_o .AND. pt%s == this%s_i) .OR. &
             (this%s_i == this%s_o .AND. z < this%z_t)) then

            dtheta = -z/(3._RD*sqrt(1._RD + z**2/3._RD)**3)

         else

            associate(alpha => this%alpha)
               dtheta = this%X(1)*( cos(alpha*z)/z - sin(alpha*z)/(alpha*z**2)) + &
                        this%X(2)*(-sin(alpha*z)/z - cos(alpha*z)/(alpha*z**2))

            end associate

         end if

      else

         dtheta = 0._RD

      end if
            
      ! Finish

      return

   end function dtheta_

   !****

   function coeff(this, i, pt)

      class(anapoly51_model_t), intent(in) :: this
      integer, intent(in)                  :: i
      type(point_t), intent(in)            :: pt
      real(RD)                             :: coeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         coeff = this%coeff_V_2_(pt)
      case (I_AS)
         coeff = this%coeff_As_(pt)
      case (I_U)
         coeff = this%coeff_U_(pt)
      case (I_C_1)
         coeff = this%coeff_c_1_(pt)
      case (I_GAMMA_1)
         coeff = this%Gamma_1
      case (I_UPS_T)
         coeff = 1._RD
      case (I_NABLA_AD)
         coeff = 0.4_RD
      case (I_OMEGA_ROT)
         coeff = this%Omega_rot
      end select

      ! Finish

      return

   end function coeff

   !****

   function coeff_V_2_(this, pt) result(coeff)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the V_2 coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)
         dtheta = this%dtheta_(pt)

         if (theta /= 0._RD) then

            if ((this%s_i /= this%s_o .AND. pt%s == this%s_i) .OR. &
                (this%s_i == this%s_o .AND. z < this%z_t)) then
         
               coeff = -6._RD*this%z_s**2*dtheta/(theta*z)

            else
               coeff = -2._RD*this%z_s**2*dtheta/(theta*z)

            end if

         else

            coeff = IEEE_VALUE(coeff, IEEE_POSITIVE_INF)

         endif

      else

         coeff = 6._RD*this%z_s**2/3._RD

      endif

      ! Finish

      return

   end function coeff_V_2_

   !****

   function coeff_As_(this, pt) result(coeff)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the As coefficient

      z = pt%x*this%z_s

      theta = this%theta_(pt)
      dtheta = this%dtheta_(pt)

      if (theta /= 0._RD) then

         if ((this%s_i /= this%s_o .AND. pt%s == this%s_i) .OR. &
             (this%s_i == this%s_o .AND. z < this%z_t)) then
         
            coeff = -6._RD*z*dtheta/theta * &
               (5._RD/6._RD - 1._RD/this%Gamma_1)

         else

            coeff = -2._RD*z*dtheta/theta * &
               (1._RD/2._RD - 1._RD/this%Gamma_1)

         end if

      else

         coeff = IEEE_VALUE(coeff, IEEE_POSITIVE_INF)

      endif

      ! Finish

      return

   end function coeff_As_

   !****

   function coeff_U_(this, pt) result(coeff)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: coeff

      real(RD) :: z
      real(RD) :: theta

      ! Evaluate the U coefficient

      if (pt%x /= 0._RD) then

         z = pt%x*this%z_s

         theta = this%theta_(pt)

         if ((this%s_i /= this%s_o .AND. pt%s == this%s_i) .OR. &
             (this%s_i == this%s_o .AND. z < this%z_t)) then

            coeff = this%t(1)*z**3*theta**5/this%mu_(pt)

         else

            coeff = this%t(2)*z**3*theta/this%mu_(pt)

         end if

      else

         coeff = 3._RD

      endif

      ! Finish

      return

   end function coeff_U_

   !****

   function coeff_c_1_(this, pt) result(coeff)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: coeff

      real(RD) :: z

      ! Evaluate the c_1 coefficient

      if (pt%x /= 0._RD) then

         coeff = pt%x**3/(this%mu_(pt)/this%mu_s)

      else

         coeff = 3._RD*this%mu_s/this%z_s**3

      endif

      ! Finish

      return

   end function coeff_c_1_

   !****

   function coeff_U_D(this, pt) result(coeff)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: coeff

      real(RD) :: z
      real(RD) :: theta
      real(RD) :: dtheta

      ! Evaluate the U_D = U*dlnrho/dlnr coefficient

      z = pt%x*this%z_s

      theta = this%theta_(pt)
      dtheta = this%dtheta_(pt)

      if ((this%s_i /= this%s_o .AND. pt%s == this%s_i) .OR. &
          (this%s_i == this%s_o .AND. z < this%z_t)) then

         coeff = this%t(1)*z**4*theta**4*dtheta/this%mu_(pt)

      else

         coeff = this%t(2)*z**4*dtheta/this%mu_(pt)

      end if

      ! Finish

      return

   end function coeff_U_D

   !****

   function dcoeff(this, i, pt)

      class(anapoly51_model_t), intent(in) :: this
      integer, intent(in)                  :: i
      type(point_t), intent(in)            :: pt
      real(RD)                             :: dcoeff

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')
      @:ASSERT_DEBUG(this%is_defined(i), 'undefined coefficient')

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Evaluate the i'th coefficient

      select case (i)
      case (I_V_2)
         @:ABORT('not implemented yet: I_V_2')
      case (I_AS)
         @:ABORT('not implemented yet: I_AS')
      case (I_U)
         @:ABORT('not implemented yet: I_U')
      case (I_C_1)
         @:ABORT('not implemented yet: I_C_1')
      case (I_GAMMA_1)
         dcoeff = 0._RD
      case (I_UPS_T)
         dcoeff = 0._RD
      case (I_NABLA_AD)
         dcoeff = 0._RD
      case (I_OMEGA_ROT)
         dcoeff = 0._RD
      end select

      ! Finish

      return

   end function dcoeff

   !****

   function mu_(this, pt) result(mu)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      real(RD)                             :: mu

      real(RD) :: z
      real(RD) :: dtheta

      ! Evaluate the mass coordinate mu

      z = pt%x*this%z_s

      dtheta = this%dtheta_(pt)

      if ((this%s_i /= this%s_o .AND. pt%s == this%s_i) .OR. &
          (this%s_i == this%s_o .AND. z < this%z_t)) then

         mu = -z**2*dtheta

      else

         mu = this%mu_t - this%t(2)/this%B(2)*(z**2*dtheta - this%z_t**2*this%dtheta_t)

      end if

      ! Finish

      return

   end function mu_

   !****

   function is_defined(this, i)

      class(anapoly51_model_t), intent(in) :: this
      integer, intent(in)                  :: i
      logical                              :: is_defined

      @:ASSERT_DEBUG(i >= 1 .AND. i <= I_LAST, 'invalid index')

      ! Return the definition status of the i'th coefficient

      select case (i)
      case (I_V_2, I_AS, I_U, I_C_1, I_GAMMA_1, I_UPS_T, I_NABLA_AD, I_OMEGA_ROT)
         is_defined = .TRUE.
      case default
         is_defined = .FALSE.
      end select

      ! Finish

      return

   end function is_defined

   !****

   function is_vacuum(this, pt)

      class(anapoly51_model_t), intent(in) :: this
      type(point_t), intent(in)            :: pt
      logical                              :: is_vacuum

      @:ASSERT_DEBUG(pt%s >= this%s_i .AND. pt%s <= this%s_o, 'invalid segment')

      ! Return whether the point is a vacuum

      is_vacuum = this%theta_(pt) == 0._RD

      ! Finish

      return

   end function is_vacuum

   !****

   function Delta_p (this, x_i, x_o)

      class(anapoly51_model_t), intent(in) :: this
      real(RD), intent(in)                 :: x_i
      real(RD), intent(in)                 :: x_o
      real(RD)                             :: Delta_p

      @:ABORT('not yet implemented')

   end function Delta_p

   !****

   function Delta_g (this, x_i, x_o, lambda)

      class(anapoly51_model_t), intent(in) :: this
      real(RD), intent(in)               :: x_i
      real(RD), intent(in)               :: x_o
      real(RD), intent(in)               :: lambda
      real(RD)                           :: Delta_g

      @:ABORT('not yet implemented')

   end function Delta_g

   !****

   function grid(this) result(gr)

      class(anapoly51_model_t), intent(in) :: this
      type(grid_t)                         :: gr

      ! Return the grid

      gr = this%gr

      ! Finish

      return

   end function grid

end module anapoly51_model_m
